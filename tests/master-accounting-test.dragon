[ main ]
dragon.main()() = {
    [ test variables ]
    dragon.set(dragon.integer.100)(a)
    dragon.set(dragon.integer.200)(b)
    test.variables_and_math(a b)(c d)
}

[ variable and math testing ]
test.variables_and_math(a !dragon.cell b !dragon.cell)(c !dragon.cell d !dragon.cell) = {
    [ test function inputs ]
    dragon.print.integer.signed(a)()
    dragon.print.new_line()()
    dragon.print.integer.signed(b)()
    dragon.print.new_line()()
}

[ new line ]
dragon.print.new_line()() = {
    dragon.set(dragon.integer.10)(character)
    dragon.print.character(character)()
}

[ looping ]
test.jumping()() = {
    @start

    dragon.jump(dragon.always @start)()
}

[ string test ]
test.strings()() = {
    dragon.set("Konnichiwa!")(message)
}

[ structures ]
!bunk(a !oof)
!box(x !dragon.cell y !dragon.cell z !dragon.cell)
!oof !foo(box !box buffer !dragon.buffer hi !dragon.cell)

[ structure accessing ]
test.structure_access()() = {
    [ setup structure ]
    dragon.set(dragon.integer.100)(a)
    dragon.set(dragon.integer.200)(b)
    dragon.set(dragon.integer.300)(c)
    dragon.pack(a b c)(structure !box)
    dragon.pack.null()(oof !oof)

    [ do stuff ]
    dragon.copy(structure)(oof:box)
    dragon.set(dragon.integer.400)(oof:buffer:start)
    dragon.copy(c)(oof:buffer:end)
}

[ create similar structures ]
!car(wheel_count !dragon.cell color !dragon.cell top_speed !dragon.cell)
!plane(wing_count !dragon.cell color !dragon.cell top_speed !dragon.cell)

[ test scoping ]
test.scopes(honda !car kia !car toyota !car)(fastest_speed !dragon.cell slowest_speed !dragon.cell) = {
    [ calculate the fastest car speed ]
    @calculate.fastest dragon.always = {
        [ setup first option ]
        dragon.copy(honda:top_speed)(fastest_speed)

        [ check for better option ]
        dragon.integer.within_range(dragon.constant.0 kia:top_speed fastest_speed dragon.always)(kia_is_faster)
        @kia.fastest kia_is_faster = {
            dragon.copy(kia:top_speed)(fastest_speed)
        }

        [ check for better option ]
        dragon.integer.within_range(dragon.constant.0 toyota:top_speed fastest_speed dragon.always)(toyota_is_faster)
        @toyota.fastest toyota_is_faster = {
            dragon.copy(toyota:top_speed)(fastest_speed)
        }
    }

    [ calculate the slowest car speed ]
    @calculate.slowest dragon.always = {
        [ setup first option ]
        dragon.copy(honda:top_speed)(slowest_speed)

        [ check for better option ]
        dragon.integer.within_range(dragon.constant.0 slowest_speed kia:top_speed dragon.never)(kia_is_slower)
        @kia.slowest kia_is_slower = {
            dragon.copy(kia:top_speed)(slowest_speed)
        }

        [ check for better option ]
        dragon.integer.within_range(dragon.constant.0 slowest_speed toyota:top_speed dragon.never)(toyota_is_slower)
        @toyota.slowest toyota_is_slower = {
            dragon.copy(toyota:top_speed)(slowest_speed)
        }
    }

    [ test offset ]
    @exit
}
