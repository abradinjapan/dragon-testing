[ test main ]
dragon.main()() = {
    [ run first test ]
    test.json.test_json_compiler()()
}

[ run test ]
test.json.test_json_compiler()() = {
    [ test compiler ]
    [ get file data ]
    dragon.set("./tests/data/test_json.json")(file_path)
    dragon.file_to_buffer(file_path)(file_text)

    [ print raw text ]
    dragon.print.buffer_as_string(file_text)()
    dragon.print.new_line()()

    [ for speed, disable address catching ]
    dragon.copy(dragon.true)(dragon.catch_addresses)

    [ compile ]
    dragon.json.compile(file_text, dragon.true)(workspace)
    dragon.print.new_line()()

    [ display message ]
    dragon.error.print_if_occured(workspace:error)()

    [ test traversal ]
    dragon.bits.xor(workspace:error:occured, dragon.constant.1)(no_error)
    @traverse no_error = {
        [ DEBUG ]
        dragon.set("Traversing by name!%0a;")(message)
        dragon.print.buffer_as_string(message)()

        [ test by name ]
        test.json.test_traversal.by_name(workspace, workspace:parslings)()
        dragon.print.new_line()()

        [ DEBUG ]
        dragon.set("Traversing by index!%0a;")(message)
        dragon.print.buffer_as_string(message)()

        [ test by index ]
        test.json.test_traversal.by_index(workspace, workspace:parslings)()
        dragon.print.new_line()()

        [ DEBUG ]
        dragon.set("Stringifying!%0a;")(message)
        dragon.print.buffer_as_string(message)()

        [ test stringifyer ]
        dragon.json.stringify.parslings(workspace !dragon.json.workspace)(string !dragon.buffer)
        dragon.print.buffer_as_string(string)()
        dragon.buffer.return(string)()
    }

    [ clean up file ]
    dragon.buffer.return(file_text)()

    [ clean up workspace ]
    dragon.json.compile.close.workspace(workspace)()
}

[ test json traversal by name ]
test.json.test_traversal.by_name(workspace !dragon.json.workspace, parslings !dragon.json.parslings)() = {
    [ setup strings ]
    dragon.set("foopo")(name_0)
    dragon.set("Hello")(name_1)

    [ test traversals ]
    dragon.json.traverse.retrieve_parsling.by_name(parslings:root, name_0)(parsling_0, found, not_found)
    dragon.json.traverse.retrieve_parsling.by_name(parsling_0, name_1)(parsling_1, found, not_found)

    [ DEBUG ]
    @failure not_found = {
        [ setup and print message ]
        dragon.set("Traversal Failure!%0a;")(message)
        dragon.print.buffer_as_string(message)()
    }

    [ print parsling value ]
    dragon.json.compile.print.parsling(workspace, parsling_1, dragon.constant.0)()
}

[ test json traversal by index ]
test.json.test_traversal.by_index(workspace !dragon.json.workspace, parslings !dragon.json.parslings)() = {
    [ test traversals ]
    dragon.json.traverse.retrieve_parsling.by_index(parslings:root, dragon.constant.0)(parsling_0, found, not_found)
    dragon.json.traverse.retrieve_parsling.by_index(parsling_0, dragon.constant.1)(parsling_1, found, not_found)

    [ DEBUG ]
    @failure not_found = {
        [ setup and print message ]
        dragon.set("Traversal Failure!%0a;")(message)
        dragon.print.buffer_as_string(message)()
    }

    [ print parsling value ]
    dragon.json.compile.print.parsling(workspace, parsling_1, dragon.constant.0)()
}
