[ main ]
main()() = {
    [ do test ]
    dragon.set(dragon.boolean.true)(do_thing)
    test.scope_parsing(do_thing)()
}

[ structures ]
!dragon.buffer !dragon.current(start !dragon.cell end !dragon.cell)

[ use structure ]
dragon.check.current_within_range(current !dragon.current)(in_range !dragon.flag) = {
    [ check if current is within range ]
    dragon.integer.within_range(current:start current:start current:end)(in_range)
}

[ test scoping ]
test.scope_parsing(do_thing !dragon.flag)() = {
    do_stuff()()
    
    [ generic scope ]
    @generic_scope dragon.always = {
        do_stuff()()
    }

    [ conditional scope ]
    @conditional_scope do_thing = {
        [ jump types ]
        dragon.jump.top(do_thing)()
        dragon.jump.bottom(do_thing)()
        dragon.jump(@exit do_thing)()
        dragon.jump(@conditional_scope:another_scope do_thing)() [ jumping to the start of another scope ]

        @another_scope dragon.always = {
            do_stuff()()
        }
    }

    [ exit offset ]
    @exit
}

[ similar structures ]
!test.box(x y)

[ testing similar structures ]
test.box_multiply(a !test.box b !test.box)(area !test.box) = {
    [ do multiplies ]
    dragon.integer.multiply(a:x b:x)(area:x)
    dragon.integer.multiply(a:y b:y)(area:y)
}

[ function arguments test ]
function(a b c !d)(e f) = {

}
