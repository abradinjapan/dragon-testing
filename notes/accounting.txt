Steps accounting needs to take for program accounting.
1. Generate predefined variables, types and structures; parse user defined structures.
2. Generate predefined functions and parse user defined functions.
3. Account each function individually.
    1. Verify and map all sub-scopes.
    2. Record all offsets.
    3. Record and validate all variables.
    4. Validate all function calls.
4. Find the main function and mark it.

How to account layered scopes?
    - Treat each scope like layers of a stack.
        - Each push onto the stack is the name of the new scope.

How to account function IO?
    - All variables in a function are normal variables.
      There is no distinction between inputs, outputs and body variables.
      All variables are either predefined or body variables.
    - Variables inside the input or output arguments are just variable declarations that happen to be where function io ends up.

How to translate structure members to cells?
    - Map out all variables in a straight line of cells.

Accounting is translating the grammar into the final program blueprint? (Not the byte code itself, the blueprint for the byte code.)
I can create the cells in the accounter and generate offsets in the generator.
In order for functions to be able to accept any type, a walkthrough of all statements is necessary to generate every necessary function.
    Also, variables and members can be validated while searching through function calls.

Maybe a separate stage for expanding out definitions is required.



New:
Function headers can be split up into different lists based on type.
    Example: generated vs user_defined headers.
    Generated:
        Set / pack, list appending.



Is knowing what variables go where a job for accounting or generation?
    It is definitely accounting for making sure that your structures are in the right function call slots.
    But it is not obvious whether or not variables need to be expanded in accounting, generation or not at all.

When generation reads the accountlings for the structure of data to be generated, can the structures have their cells resovled on the fly?
    Maybe?



Maybe, accounting is a stage that must generate a new output to the next stage.
    Like how stages have data come in and unique data go out, not just marking up, but actual transformations of data.
        Source code -> Lexing -> Lexlings
        Lexlings -> Parsing -> Parslings
        Parslings -> Accounting -> Accountlings (Program blueprint for generator to use).
        Accountlings -> Generator -> Byte Code
    Every stage has unique inputs and unique outputs.
    Every stage re-represents the original code in a new way.
    Every stage is a unique complete transformation of the code.
        Including generation.

So what is the optimal way to transform variables into cells?
    I could completely flatten out the structures variables to a list of individual cells.

Function header arguments are just normal variable declarations that are set with input data from other functions.



The issue is how to work with sub-structures?
    Maybe I should focus on generation instead of accounting?
    The program blueprint can be more complicated than just every register already laid out.

What if every structure variable was declared individually?

Every sub-structure reference starts with the variable name and continues down the list through sub-structure names.
There are two things that can happen with arguments.
    1) Variable only.
    2) Variable + sub-structures.



Variables and structure members are NOT the same thing.
Thus they are indexed seperately.
    One index for the variable ID.
    One index for the sub-structure ID.
        This index is an array of all members and sub-members.

Indexing members works like this:
    Read the tree from left to right and keep an integer incrementing every structure searched.
    The index that references the member is also the integer deep into the tree.



How to account:
    All scopes must be recorded and be made indexable.
    All offsets must be searched for and be made indexable.
        Normal offsets and scope offset names must not conflict.
    All variables must be declared before used.
        Get function IO.
    All member arguments must be valid.
    All strings must be converted.



How to account the scopes in a way that is effective for generation to generate code?
    Maybe get pointers to the accountling version of the statements list.
    How to do scope start and scope end offset indexing?
        Since the statements are not all in the same buffer, it becomes difficult to easily index offsets.
            Actually, a pre-generation calculation will have to be done on how many scopes there are.
            So all that needs to be done is to fill in those offsets and hold onto a scope ID that can index into the scopes offset array when a jump needs the offset.

So scopes in generation will have:
    - Scope start and end offsets.
    - An index.

Scopes in generation do not care about names, they just read indicies from a buffer.
    Therefore, accounting should translate offsets and scopes into indicies.



Is accounting everything in a program a different act from turning an accounted program into a program framework?
    In other words, is semantic analysis different from generating a program blueprint (aka framework)?
        Framework as in the highlevel blueprint, not the byte code.
        Maybe.



Accounting variables is done by checking a statement output argument for a new name that does NOT contain any structure-member accesses.
    Structure member accesses are not variable declarations but using already defined variables.
There is one problem though, how to deal with explicit type declarations?
    Like this: dragon.pack(a b c)(new_variable !explicit_type)
    Maybe make the header based on the explicit type?



Statements are something I havent totally figured out yet.
    Do I need to do function call recording first or variable searching first?
    Do I need to do them at the same time?
Statement requirements:
    1) Records of scopes and offsets.
    2) Records of strings.

I have to write the backend in terms of "What code would this result in?".
    Since I don't have a clear idea what code is generated, I don't have a clear understanding of what needs to be done.
    Hence, why I'm stuck.



How to create and use variables?
    Maybe generate variables and translate statements one at a time sequentially? (Instead of in multiple passes.)
How to create and use structure accesses?
    Have an index of the master variable being accessed.
    Have an index for the tree type.
How to map structure accesses in variables to cell ranges?
    Each master variable will have to have a cell index to mark its starting point and an end point.
    From there, each sub-variable should have a starting point and an ending point.
    What if every sub-structure combination was its own type?
        In other words, what if every variable, sub-structure in a variable & every combination henceforth was labeled as its own unique type?
    What if I also made this up as I went along?



Every structure will have an indexed tree.
The index is [ 'structure_ID', 'sub_structure_ID' ]
Can structures be indexed without a sub_structure_ID?
    One index and all structures indexed into it?
        Since recursive structures are not allowed, there would be no repeating structures.
            But this doesnt account for there being multiple of the same types in one structure which is legal.
So a solution is for a list off all sub-structures that can be indexed into should be created.
    Or you could make one list for types and another for members.
        You could switch back and forth between each list when validating arguments.
Structure member indicies are different from cell ranges because cell ranges are only for variables that are declared, not sub-structures.



Maybe I just need more infrastructure in order to make writing in new accountling statements easier?

Things to keep in mind:
    - Variables can only be declared in outputs.
        - If a master variable does not exist but is found in the output of a function by itself, it is automatically declared.
            - Master variables when declared also declare all their sub-variables alongside the master variable.
        - In user defined function calls, due to specific function output argument types possibly being ambiguous, manually selecting the variable type might be necessary for a particular call.
            - This also means that checking types before declaring variables might be necessary.
                - But how to deal with that when master variables being in an output slot IS their declaration?
    - The first name in any argument is a variable name while sub-variables are just structure accesses inside that variable.
    - Manual type declaring ALWAYS overrides the type of the variable if not declared.
        - If the variable already exists, and the types do not match, it is an automatic error.



Variable declaration must be changed to allow for manual typing.
    For instance, when you have a function call that is an exact copy of another function call except for one output, manually deciding the type becomes necessary in order to avoid mixing up two or more calls.
Types should not be marked until their correct header has been identified.
The thing is, user defined function calls might have the same name & inputs but different outputs.
    Outputs are of unknown type until the called function is determined.
    Which means that without specificity, a function indexing issue could arise.
So how to check for a function call that is ambiguous?
    Check for arguments in the same spot in both headers and check if they match.
Its not that there is an argument without a type, there is just more than one option.
