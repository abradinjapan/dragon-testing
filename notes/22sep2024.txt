Ok so, structures to cells & accountling statements to instruction generation calls.

Structures are a multi-nested item that always ends in a cell node.
Variables are just structure declarations.
    They translate into cells.

Maybe its not a cell range?
    Maybe for built in types, a dedicated struct is necessary?
        But what about user defined structures?
            Cell ranges should suffice.

Maybe cells are the baseline and structures above are just references to cell groups.

Three parts to variables:
    1) Name.
    2) Sub-structures.
    3) Dragon cell end nodes.

Is merging multiple separate functionalities into one syntax the power of languages?

Declaring variables is separate from structure makeup.
    Structure makeup does not contain a cell by cell map.
    Variables have a cell by cell makeup.

Does passing cell ranges as long as the structures line up really matter that much?
    Although this only applies to function calls.

So maybe the issue is not general structure passing, but passing only for function calls.
    Since non-function call statements have hard coded structs, it is not necessary for any general purpose structure passing.

How to pass variables in function calls only?
    Traverse a structure's heirarchy when in code generation and generate cell values from it (the end nodes being dragon.cell).

Maybe I could use generic statement data for code generation instead of specific statements?
    Or I could use an algorithm to search for statements declaration instead of searching individually.

Structures and variables are separate concepts.
    Structures organize cells.
    While variables are cells.



How to work with structures during code generation phase?
